// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ZeissInterviewTask.Feature
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Authentication Api")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class AuthenticationApiFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Authentication Api", "Authentication Api validates a user login", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "AuthenticationApi.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User Logins with valid credentials")]
        [NUnit.Framework.CategoryAttribute("ValidCredentials")]
        [NUnit.Framework.TestCaseAttribute("John", "Doe", "200", "true", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Jane", "Doe", "200", "true", "2", null)]
        public async System.Threading.Tasks.Task UserLoginsWithValidCredentials(string userName, string password, string code, string successMessage, string userId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ValidCredentials"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserName", userName);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("Code", code);
            argumentsOfScenario.Add("SuccessMessage", successMessage);
            argumentsOfScenario.Add("userId", userId);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User Logins with valid credentials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("an authentication api", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync(string.Format("the user enters \"{0}\" and \"{1}\"", userName, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
 await testRunner.AndAsync(string.Format("the response body should be \"{0}\", \"{1}\",\"<username>\"", successMessage, userId), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User logins with invalid credentials")]
        [NUnit.Framework.CategoryAttribute("InValidCredentials")]
        [NUnit.Framework.TestCaseAttribute("Case sensitivity", "john", "doe", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("special characters", "J@hn", "Do*", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid password", "John", "123", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid Username", "Sam", "Doe", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Password is null", "John", "null", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Username is null", "null", "Password", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Both Password and username are null", "null", "null", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Password is empty", "John", "<empty>", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Username is empty", "<empty>", "Password", "false", "Invalid username or password.", null)]
        [NUnit.Framework.TestCaseAttribute("Both Password and username are empty", "<empty>", "<empty>", "false", "Invalid username or password.", null)]
        public async System.Threading.Tasks.Task UserLoginsWithInvalidCredentials(string description, string userName, string password, string successMessage, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InValidCredentials"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("UserName", userName);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("SuccessMessage", successMessage);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User logins with invalid credentials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
 await testRunner.GivenAsync("an authentication api", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
 await testRunner.WhenAsync(string.Format("the user enters \"{0}\" and \"{1}\"", userName, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.ThenAsync("the response status code should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
 await testRunner.AndAsync(string.Format("the response should be \"{0}\" and \"{1}\"", successMessage, errorMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Account is blocked after 3 unsuccessfull login attempts")]
        [NUnit.Framework.CategoryAttribute("AdditonalScenarios")]
        public async System.Threading.Tasks.Task AccountIsBlockedAfter3UnsuccessfullLoginAttempts()
        {
            string[] tagsOfScenario = new string[] {
                    "AdditonalScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Account is blocked after 3 unsuccessfull login attempts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.GivenAsync("the user has attempted 3 unsuccessfull login", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
 await testRunner.WhenAsync("the user enters \"UserName\" and \"Password\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.ThenAsync("the response status code should be 429", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "ErrorMessage"});
                table1.AddRow(new string[] {
                            "User is blocked to login for next 24 hours"});
#line 40
 await testRunner.AndAsync("the response should have", ((string)(null)), table1, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate user is able to login after password reset")]
        [NUnit.Framework.CategoryAttribute("AdditonalScenarios")]
        public async System.Threading.Tasks.Task ValidateUserIsAbleToLoginAfterPasswordReset()
        {
            string[] tagsOfScenario = new string[] {
                    "AdditonalScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate user is able to login after password reset", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 45
 await testRunner.GivenAsync("the user has reset the password", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 46
 await testRunner.WhenAsync("the user enters \"John\" and new \"DoeDoe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
 await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate user tries to login using expired password")]
        [NUnit.Framework.CategoryAttribute("AdditonalScenarios")]
        public async System.Threading.Tasks.Task ValidateUserTriesToLoginUsingExpiredPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "AdditonalScenarios"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate user tries to login using expired password", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 51
 await testRunner.GivenAsync("the user\'s password has expired", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
 await testRunner.WhenAsync("the user enters \"John\" and \"Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
 await testRunner.ThenAsync("the response status code should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
